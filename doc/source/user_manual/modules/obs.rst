.. _sec_obs:Observation handling (obs)--------------------------Overview~~~~~~~~:ref:`fig_uml_obs` present an overview over the C++ classes of the obsmodule and their relations... _fig_uml_obs:.. figure:: uml_obs.png   :width: 100%   Observation moduleThe central C++ class of the obs module is the abstract base class``GObservation`` which defines the instrument-independent interface for agamma-ray observation. A gamma-ray observation is defined for a singlespecific instrument, and describes a time period during which theinstrument is in a given stable configuration that can be characterizedby a single specific response function. Each gamma-ray observation iscomposed of events, a response function and a pointing.Observations are collected in the C++ container class ``GObservations``which is composed of a list of ``GObservation`` elements (the list is ofarbitrary length; an empty list is a valid state of the ``GObservations``class). The observation container is furthermore composed of a ``GModels``model container class that holds a list of models used to describe theevent distributions of the observations (see :ref:`sec_model`). The``GObservations`` class presents the central element of all scientific dataanalyses, as it combines all data and all models in a single entity.Instrument specific implementations of ``GObservation`` objects areregistered in the C++ registry class ``GObservationRegistry`` whichstatically collects one instance of each instrument-specific observationclass that is available in GammaLib (see :ref:`sec_registry` for a generaldescription of registry classes).The instrument response for a given observation is defined by theabstract base class ``GResponse``. This class is composed of the C++ class``GCaldb`` which implements the calibration data base that is required tocompute the response function for a given instrument and observation.``GCaldb`` supports the HEASARC CALDB format(http://heasarc.nasa.gov/docs/heasarc/caldb/), but is sufficientlygeneral to support also other formats (see :ref:`sec_caldb` to learnhow to setup and to use a calibration database).The pointing for a given observation is defined by the abstract baseclass ``GPointing``. This class is composed of the C++ class ``GSkyDir`` whichimplements a sky direction, which is a position on the celestial sphere(``GSkyDir`` returns the position in equatorial and galactic coordinates).Note that the pointing needs not to be fixed during the observation butmay evolve with time. In this case, the sky direction returned by``GPointing`` will explicitly depend on time.The events for a given observation are defined by the abstract baseclass ``GEvents``. This class is composed of the C++ classes ``GGti`` and``GEbounds``. ``GGti`` implements so called *Good Time Intervals*, which definesthe time period(s) during which the data were taken (see :ref:`sec_time`).``GEbounds`` implements so called *Energy Boundaries*, whichdefine the energy intervals that are covered by the data (see :ref:`sec_energy`).``GEvents`` is also a container for the individual events, implemented by theabstract ``GEvent`` base class. GammaLib distinguishes two types of events: eventatoms, which are individual events, and event bins, which arecollections of events with similar properties. Event atoms areimplemented by the abstract base class ```GEventAtom``, while event bins areimplemented by the abstract base class ``GEventBin``. Both classes derivefrom the abstract ``GEvent`` base class.Each event type has it's own container class, which derives from theabstract ``GEvents`` base class. Event atoms are collected by the abstract``GEventList`` base class, while event bins are collected by the abstract``GEventCube`` base class. The ``GEventList`` class contains an instance of theabstract ``GRoi`` base class... _sec_obsxml:Describing observations using XML~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~TBW: Describe the observation XML format, and show how to handleobservations using this format... _sec_response:Handling the instrument response~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~TBW: Describe how the instrument response is handled and what thegeneral interfaces are. Note that the deadtime correction is taken intoaccount in the ``GResponse::irf``, ``GResponse::npred``, and ``GResponse::mc``methods... _sec_caldb:Setting up and using a calibration database~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~TBW: Describe how to setup and how to use a calibration database... _sec_time:Times in GammaLib~~~~~~~~~~~~~~~~~TBW: Describe how times are implemented in GammaLib. This section should alsohandle GTIs... _sec_energy:Energies in GammaLib~~~~~~~~~~~~~~~~~~~~TBW: Describe how energies are implemented in GammaLib. Mention that theinternal energy is MeV. This section should also handle EBOUNDS... _sec_roi:Regions of Interest~~~~~~~~~~~~~~~~~~~TBW: Describe what a ROI is and why this is needed (unbinned analysis).