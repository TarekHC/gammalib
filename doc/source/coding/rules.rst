General coding rules====================This section provides lists of general coding rules for the GammaLibdevelopment.C++ rules---------Code format^^^^^^^^^^^-  Blocks are indented by 4 characters.-  Do not use tabs (code formatting should be independent of editor   configurations).-  Do not exceed a line length of 80 characters (a few more characters   are acceptable in exceptional cases).-  Put a blank line at the end of each file (this is required by some   compilers).-  Each function starts with a curly bracket in the line following the   function name. The return type is in the same line as the function   name. Example:   .. code-block:: cpp       int function(void)       {           int i = 0;           ...           return i;       }-  Code blocks should be encompassed in curly brackets, even if the block   consists only of a single line.-  The opening curly bracket of a block starts in the same line as the   related statement. Example:   .. code-block:: cpp       for (int i = 0; i < 10; ++i) {           sum += i;       }-  Separate code elements by spaces; for example, do not write ``int i=0;``   but write ``int i = 0;``.-  Align successive similar lines on common elements. Here a common example   illustrating the alignment on the ``=`` symbol:   .. code-block:: cpp       m_max    = par.m_max;       m_prompt = par.m_prompt;       sum     += par.m_sum;   And here an example illustrating the alignment in a class definition on the   member function name:   .. code-block:: cpp       void        log10GeV(const double& eng);       void        log10TeV(const double& eng);       std::string print(void) const;Code semantics^^^^^^^^^^^^^^-  Each function and/or method terminates with a return statement.-  Each function and/or method has only a single exit point (i.e. a   single return statement).-  Use explicit for constructors with single arguments to prevent unintended   type conversions. The only exception to this rule is the copy   constructor or type conversion constructors.-  Specify void for function definitions without arguments, i.e. use   ``void function(void)`` instead of ``void function()`` in the   function declaration.-  Use pre incrementation in loops (pre incrementation is faster than   post incrementation). Example:   .. code-block:: cpp       for (int i = 0; i < 10; ++i) {           sum += i;       }-  Where possible (and appropriate), use std::vector containers instead   of allocating memory. In other words: avoid direct memory allocation.-  Use ``std::`` namespace prefix where possible; write for example   .. code-block:: cpp       std::sin(angle);       std::cos(angle);   You may not believe it, but droping the ``std::`` may on some systems   lead to considerably slower code for trigonometric functions!-  Provide comments, comments, comments!!!Language features^^^^^^^^^^^^^^^^^-  Do not use macros.-  Do not use #define directives for the declaration of constants. Use   const instead.-  Do not use ``std::strncpy``, ``std::memcpy`` or similar as these functions   are corrupted on some systems.-  If possible, pass arguments by reference.-  Use C++ (``std::string``) instead of C-style (``char*``) strings.-  Use C++ casts instead of C-style casts.-  Avoid using templates.Python rules-------------  All code must be compatible with Python 2.4, 2.5, 2.6, 2.7 as well as   3.2 or later.-  Python code should follow the official PEP8 Python style:   http://www.python.org/dev/peps/pep-0008/   It says (among many other things) that you should indent with four   spaces, not tabs. Following PEP8 is simple, because there's a pep8   tool (https://github.com/jcrocholl/pep8) that you should run on your   Python code before committing, e.g. like so:   .. code-block:: bash       $ pep8 test/test_python.py       ...       test/test_python.py:156:1: W191 indentation contains tabs       test/test_python.py:156:1: W391 blank line at end of file       test/test_python.py:156:1: W293 blank line contains whitespace       $   If you want you can even use the autopep8 tool   (https://github.com/hhatto/autopep8) which can automatically fix the   formatting for almost all cases. Run pep8 -h and autopep8 -h to see   the options you can use. PEP8 compliance is automatically checked by   the continuous integration system.