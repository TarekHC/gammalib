from distutils.core import setup, Extension
from distutils import sysconfig
import glob
import os
import sys

# Define package name
pkg_name = 'gammalib'

# Define core modules
core_modules = ['app', 'fits', 'linalg', 'model', 'numerics', \
                'obs', 'opt', 'sky', 'support', 'xml']

# Check on test install
if (len(sys.argv) == 3):
	if (sys.argv[2] == '--home=install'):
		print "This install is for unit testing."


# Set GammaLib library name. If we're about to make the test build then
# create a symbolic link to the static library to enforce static linking.
# This is required on some system (such as Mac OS X) to avoid problems
# with finding the shared library during unit testing.
libgamma='gamma'
if (len(sys.argv) > 1):
	if (1 == 1):
	
		# Remove any existing symbolic link to libgamma.a. This will
		# prevent any exception in creating the symbolic link due to
		# an already existing link.
		try:
			os.remove('../src/.libs/libgamma_python.a')
			print 'Removed ../src/.libs/libgamma_python.a'
		except:
			pass
		
		# Now create a symbolic link and set the library name to this
		# symbolic link
		try:
			os.symlink('libgamma.a', '../src/.libs/libgamma_python.a')
			print 'Created ../src/.libs/libgamma_python.a'
			libgamma='gamma_python'
		except:
			print 'WARNING: Failed to create symbolic link to static library. Link dynamically.'

# Set default include directories and data files
include_dirs = ['@top_srcdir@/include']
data_files   = glob.glob('@top_srcdir@/pyext/*.i')
library_dirs = ['../src/.libs']
libraries    = [libgamma]

# Set default runtime library directories
if os.path.exists('@prefix@/lib'):
	runtime_library_dirs = ['@prefix@/lib']
else:
	runtime_library_dirs = []
runtime_library_dirs = []

# Add cfitsio library only if available
if '@WITH_CFITSIO_TRUE@' != '#':
	print "Link cfitsio into Python bindings."
	libraries.append('cfitsio')

# Add readline library only if available
if '@WITH_READLINE_TRUE@' != '#':
	print "Link readline into Python bindings."
	libraries.append('readline')
	libraries.append('ncurses')

# Add extra libraries
extra_libs = ('@PYTHON_EXTRA_LIBS@').split(',')
for extra_lib in extra_libs:
	if len(extra_lib) > 0:
		libraries.append(extra_lib)

# Get extra library paths
extra_lib_paths = ('@LDFLAGS@').split(' ')
for extra_lib_path in extra_lib_paths:
	if extra_lib_path.lstrip().find('-L') == 0:
		dir = extra_lib_path.lstrip().lstrip('-L')
		if len(dir) > 0:
			library_dirs.append(dir)
			runtime_library_dirs.append(dir)

# Get extra include directories
extra_inc_paths = ('@CPPFLAGS@').split(' ')
for extra_inc_path in extra_inc_paths:
	if extra_inc_path.lstrip().find('-I') == 0:
		dir = extra_inc_path.lstrip().lstrip('-I')
		if len(dir) > 0:
			include_dirs.append(dir)

# Add definitions for instrument specific modules
inst_modules = []
if '@WITH_INST_MWL_TRUE@' != '#':
	print "Include multi-wavelength interface in gammalib Python bindings."
	inst_modules.append('mwl')
if '@WITH_INST_CTA_TRUE@' != '#':
	print "Include CTA instrument interface in gammalib Python bindings."
	inst_modules.append('cta')
if '@WITH_INST_LAT_TRUE@' != '#':
	print "Include Fermi/LAT instrument interface in gammalib Python bindings."
	inst_modules.append('lat')

# Set extension definition for core modules
ext_modules = []
py_modules  = []
for module in core_modules:
	
	# Define module
	ext_module = Extension('_'+module, [pkg_name+'/'+module+'_wrap.cpp'], \
	                       include_dirs=include_dirs, \
						   libraries=libraries,
						   library_dirs=library_dirs,
						   runtime_library_dirs=runtime_library_dirs)
	ext_modules.append(ext_module)
	py_modules.append(pkg_name+'.'+module)

# Set extension definition for instrument dependent modules
for module in inst_modules:

	# Define paths
	pyext_path   = '@top_srcdir@/inst/'+module+'/pyext'
	include_path = '@top_srcdir@/inst/'+module+'/include'
	
	# Set include directories for module
	include_inst_dirs = include_dirs
	include_inst_dirs.append(include_path)
	
	# Add SWIG files to data_files
	data_files.extend(glob.glob(pyext_path+'/*.i'))
	
	# Define module
	ext_module = Extension('_'+module, [pyext_path+'/'+module+'_wrap.cpp'], \
	                       include_dirs=include_dirs, \
						   libraries=libraries,
						   library_dirs=library_dirs,
						   runtime_library_dirs=runtime_library_dirs)
	ext_modules.append(ext_module)
	py_modules.append(pkg_name+'.'+module)

# Create gammalib/__init__.py file
file = open(pkg_name+'/__init__.py', 'w')
for module in core_modules:
	file.write('from '+module+' import *\n')
for module in inst_modules:
	file.write('from '+module+' import *\n')
file.close()


# Setup
setup(name='@PACKAGE_NAME@',
      version='@PACKAGE_VERSION@',
      description='gammalib Python bindings',
      author='Juergen Knoedlseder',
      author_email='@PACKAGE_BUGREPORT@',
      url='http://gammalib.sourceforge.net/',
      packages=[pkg_name],
      ext_package=pkg_name,
      ext_modules=ext_modules,
      py_modules=py_modules,
	  )
#data_files=[('@prefix@/share/gammalib/swig', data_files)],
