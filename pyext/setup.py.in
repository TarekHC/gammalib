from distutils.core import setup, Extension
import glob
import os

# Remove any existing symbolic link to libgamma.a
# This will prevent any exception in creating the symbolic link due to
# an already existing link.
try:
	os.remove('../src/.libs/libgamma_python.a')
	print 'Removed ../src/.libs/libgamma_python.a'
except:
	pass

# Create a symbolic link. This allows us to enforce static linking instead of
# dynamic linking. We prefer here static linking to avoid any problems with
# finding the gammalib shared library during checking.
try:
	os.symlink('libgamma.a', '../src/.libs/libgamma_python.a')
	print 'Created ../src/.libs/libgamma_python.a'
	libgamma='gamma_python'
except:
	libgamma='gamma'

# Set default include directories and data files
include_dirs         = ['@top_srcdir@/include']
data_files           = glob.glob('@top_srcdir@/pyext/*.i')
library_dirs         = ['../src/.libs']
runtime_library_dirs = []
libraries            = [libgamma]

# Add cfitsio library only if available
if '@WITH_CFITSIO_TRUE@' != '#':
	print "Link cfitsio into Python bindings."
	libraries.append('cfitsio')

# Add readline library only if available
if '@WITH_READLINE_TRUE@' != '#':
	print "Link readline into Python bindings."
	libraries.append('readline')
	libraries.append('ncurses')

# Add extra libraries
extra_libs = ('@PYTHON_EXTRA_LIBS@').split(',')
for extra_lib in extra_libs:
	if len(extra_lib) > 0:
		libraries.append(extra_lib)

# Get extra library paths
extra_lib_paths = ('@LDFLAGS@').split(' ')
for extra_lib_path in extra_lib_paths:
	dir = extra_lib_path.lstrip('-L')
	if len(dir) > 0:
		library_dirs.append(extra_lib_path.lstrip('-L'))

# Get extra include directories
extra_inc_paths = ('@CPPFLAGS@').split(' ')
for extra_inc_path in extra_inc_paths:
	dir = extra_inc_path.lstrip('-I')
	if len(dir) > 0:
		include_dirs.append(extra_inc_path.lstrip('-I'))

# Add instrument specific include directories and data files
if '@WITH_INST_MWL_TRUE@' != '#':
	print "Include multi-wavelength interface in gammalib Python bindings."
	include_dirs.append('@top_srcdir@/inst/mwl/include')
	data_files.extend(glob.glob('@top_srcdir@/inst/mwl/pyext/*.i'))
if '@WITH_INST_CTA_TRUE@' != '#':
	print "Include CTA instrument interface in gammalib Python bindings."
	include_dirs.append('@top_srcdir@/inst/cta/include')
	data_files.extend(glob.glob('@top_srcdir@/inst/cta/pyext/*.i'))
if '@WITH_INST_LAT_TRUE@' != '#':
	print "Include Fermi/LAT instrument interface in gammalib Python bindings."
	include_dirs.append('@top_srcdir@/inst/lat/include')
	data_files.extend(glob.glob('@top_srcdir@/inst/lat/pyext/*.i'))

# Setup
setup(name='@PACKAGE_NAME@',
      version='@PACKAGE_VERSION@',
      description='gammalib Python bindings',
      author='Jurgen Knodlseder',
      author_email='@PACKAGE_BUGREPORT@',
      url='http://gammalib.sourceforge.net/',
      py_modules=['gammalib'],
      ext_modules=[Extension('_gammalib', ['gammalib_wrap.cpp'],
                             include_dirs=include_dirs,
                             library_dirs=library_dirs,
                             libraries=libraries,
                             runtime_library_dirs=runtime_library_dirs)],
      data_files=[('@prefix@/share/swig/gammalib', data_files)],
      )
